Jenkins Demo:

Change Jenkins Port number:

1. go to below path

     /usr/lib/systemd/system

  2.  Open below configuration file

      sudo vi jenkins.service

  3. Go to below property and change the port number

       Environment="JENKINS_PORT=8383”

  4. jenkins service changed on disk. Run ‘systemctl daemon-reload’ to reload units.

      sudo systemctl daemon-reload

  4. Restart Jenkins 

      sudo systemctl restart jenkins

  5. Check the Status of Jenkins Server

     sudo systemctl status jenkins

  6. Access the URL(with new port number) in browser level.

     http://<<publicIPAddress of EC2 Instance>:8383/login

1. Create a Freestyle job in jenkins

Create a new job in jenkins
Click on + sign to create new item/job/project
Give a name to the job : Job1
Select freestyle project and click on OK button
Go to Build Steps --> Select Execute Shell
Give below commands
touch sonal
echo "hello from Jenkins!"

Save the JOb

Click on build Now

Click on workspace


2. Create a freestyle job and integrate it with GITHUB repostitory

Demo 1: Create a Jenkisn job that will clone a github repository in jenkins workspace

Create a new job in jenkins
Click on + sign to create new item/job/project
Give a name to the job : CloneRepo
Select freestyle project and click on OK button
On the project click on Source code management
Select git option
Give git hub repo path
https://github.com/Sonal0409/DevOpsCodeDemo.git

Branch name as ===>  Master

Save the job

Click on Build now

Repository will be cloned in jenkins workspace

You can go to job → workspace folder to see the files

3. Create a frestyle job and integrate it with Maven

======================================================================

RIGGERS

TRIGGERS

If we want to automatically trigger a Job

Build triggers for any job:

1. Trigger builds remotely (e.g., from scripts)

Select the above very first option
give Authentication token as : token1 
any unique token number

And then copy the path provided below in this format:
JENKINS_URL/job/job4/build?token=TOKEN_NAME 


update the above url in this way:
Jenkins_URL: Curent url :http://3.140.252.165:8080
Token_NAME: token number/name provided above

Take this path and execute on anyother browser.

http://3.140.252.165:8080//job/job4/build?token=token1

Login as admin admin
you can run that job.

2. GitHub hook trigger for GITScm polling

> Select the above option

Save the job and now go to git hub

Always save the job and then only  go to git hub, perform these steps

go to the repository setting
select webhooks on left side
delete if any exisitng webhook

click on createwebhook on right side

provide following information:

Payload URL : jenkinsurl/github-webhook/ ===> http://3.140.252.165:8080/github-webhook/

Content type : select application/json

Secret: no need of any value

Which events would you like to trigger this webhook?

select first option -- Just the push event.

Select Active
click on add webhook.

now make some changes in repo,
go to jenkins--> you will see a new build has been created

3. Trigger prieodically

Create anew Job--> build trigger--> build preodically --> give */2 * * * * --> Save and build now
All build will be genrated automatically every 2 mins

4. Trigger by POLL SCM

Create a new Job-->Source code management--> Add git path

https://github.com/Sonal0409/GITHUBJENKINSDEMO

Build Triggers--> Poll SCM --> * * * * *

Build will be generated each time there is a chnage in the repository only.

*********************************



*********************

If we want to automatically trigger a Job

1. Trigger prieodically

Create anew Job--> build trigger--> build preodically --> give */2 * * * * --> Save and build now
All build will be genrated automatically every 2 mins

2. Trigger by POLL SCM

Create a new Job-->Source code management--> Add git path

https://github.com/Sonal0409/GITHUBJENKINSDEMO

Build Triggers--> Poll SCM --> * * * * *

Build will be generated each time there is a chnage in the repository only.

====================================================================






MAVEN : 
=========================
> It is a powerful tool which helps in building, managing and documenting your project

> Maven by heart is a plugin based tool

> whenever a maven plugin or command is executed, its output will be stored in folder called target

> It has 2 types of plugins:

Core Build plugins:
=============================================================================================================
Task  					Plugin					GOAL/Commands 	     output
==============================================================================================================
Compile the code  			Compiler				mvn compile		class files

execute some Testcases		       Surefire				        mvn test		test passed/failed status

Package the code			package					mvn package            .war file

Clean the previous build	        clean					 mvn clean		clean up from target folder
files

Deploy artifact on 			deploy					mvn deploy
artifactory

install all dependencies	        install					mvn install


In maven multiple goals can be executed together

# mvn clean install package



Reporting plugins:
==============================
Will always generate reports, and in maven the reports are mostly generated in the format : xml,html,txt

Task  						Plugin			GOAL/Commands 	                        output

Code Review				pmd				mvn pmd:pmd		               pmd.xml report	

test reports				surefire			mvn test		              surefire reports - xml,txt

Code coverage				JACOCO,sonarqube		mvn sonar:sonar



Structure MAVEN project

src/main/java   ==> source code will be present
src/test/java   ==> test cases will be present

pom.xml   ==> heart of maven project

 1. dependencies   ==> tools downloded by developer to write code
 2. plugin information
 3. Repositories ( local, central & remote)
URls or location from ehre we have to download the plugin or dependency

===============================================

Demo 3: Jenkins + maven integration:

Jenkins--> Manage Jenkins-->Global Tool configuration

Under GIT==> leave it same 

Under maven ==> lets install it automatically
Type mymaven and check the install automatically box.
Save the changes


**********************************
Job Package Job
***************************

Go to jenkins--> new item--> Name= Package==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsClassCodes
 
build ==> invoke top level maven target==>mymaven

 goal = clean install package

==> save==> build now
==> click on build number and see the console

==> go to workspace ==> target/addressbook.war

==========================================================================
